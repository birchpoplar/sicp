#+TITLE: SICP Book - Exercises
#+AUTHOR: Johnnie Walker
#+PROPERTY: header-args :eval yes
#+PROPERTY: header-args:racket :lang sicp

* Chapter 1 Exercises
** Exercise 1.1
#+begin_src racket :lang sicp
  10

  (+ 5 3 4)

  (- 9 1)

  (/ 6 2)

  (+ (* 2 4) (- 4 6))

  (define a 3)

  (define b (+ a 1))

  (+ a b (* a b))

  (< a b)

  (if
   (and
    (> b a)
    (< b (* a b)))
   b
   a)

  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))

#+end_src

#+RESULTS:
: 16
** Exercise 1.2

#+begin_src racket :lang sicp

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))
  
#+end_src

#+RESULTS:
: -37/150

** Exercise 1.3

#+begin_src racket
  (define (sumsq a b)
    (+ (* a a) (* b b)))

  (define (sumbigs x y z)
    (cond ((and (< x y) (< x z)) (sumsq y z))
          ((and (< y x) (< y z)) (sumsq x z))
          ((and (< z x) (< z y)) (sumsq y z))))

  (sumbigs 11 3 5)
  
#+end_src

#+RESULTS:
: 146

** Exercise 1.4

#+begin_src racket :lang sicp
  (define (a-plus-abs-b a b)
    ((if (> b 0) + - ) a b))

  (a-plus-abs-b 1 -30)
#+end_src

#+RESULTS:
: 31

This works as the if statement checks for ~b~ as greater than zero, if it is then the '+' operator is applied to the arguments ~a~ and ~b~, otherwise the '-' operator is applied)

** Exercise 1.5
The ~(define (p) (p)~ is a recursive definition that will never end, will always just call itself.

The point being made here is with normal-order evaluation the ~(p)~ will never be successfully evaluated (a continuous loop), and so ~(test 0 (p))~ will not evaluate.

However, with applicative-order evaluation the substitution and execution allows completion:

#+begin_src racket :lang sicp

  (define (p) (p))

  (test 0 (p))

    (if (= 0 0)
        0
        (p))
#+end_src

#+RESULTS:
: /tmp/babel-p6qJOT/org-babel-xgBrFk.rkt:8:1: test: unbound identifier
:   in: test
:   location...:
:    /tmp/babel-p6qJOT/org-babel-xgBrFk.rkt:8:1

This will successfully complete with return value of ~0~.

#+BEGIN_QUOTE
*Applicative vs. Normal Order Evaluation*
Applicative Order (Eager Evaluation):
- Arguments to functions are evaluated before the function is applied.
- This means all subexpressions are computed as soon as they are encountered.
Normal Order (Lazy Evaluation):
- Arguments to functions are not evaluated until their values are needed.
- Subexpressions are deferred and evaluated only if they affect the final result.
#+END_QUOTE

** Exercise 1.6

Exercise demonstrates the difference in evaluation between ~if~ and ~cond~. ~if~ only evaluates whichever branch is dictated by the predicate. Whereas in the ~cond~ the interpreter eagerly evaluates all arguments.

#+begin_src racket

  ;; DO NOT RUN, GETS STUCK IN RECURSION LOOP

  (define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause)))

  (new-if (= 2 3) 0 5)

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y)
    (/ (+ x y) 2))

  (define (square x)
    (* x x))

  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))

  (define (sqrt-iter guess x)
    (new-if (good-enough? guess x)
            guess
            (sqrt-iter (improve guess x)
                       x)))

  (define (sqrt x)
    (sqrt-iter 1.0 x))

  (sqrt 9)

#+end_src

#+RESULTS:
: /tmp/babel-p6qJOT/org-babel-4pmEos.rkt:19:14: square: unbound identifier
:   in: square
:   location...:
:    /tmp/babel-p6qJOT/org-babel-4pmEos.rkt:19:14

By default, gets stuck in recursion loop.

** Exercise 1.7

Improvements:
- define local variable ~improved_guess~
- make the ~good-enough?~ test use dynamic precision, i.e. compare to a tolerance based on the scale of the input ~x~

#+begin_src racket :lang sicp

  (define (sqrt-iter guess x)
    (let ((improved_guess (improve guess x)))
      (if (good-enough? guess improved_guess x)
          improved_guess
          (sqrt-iter improved_guess 
                     x))))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y)
    (/ (+ x y) 2))

  (define (good-enough? guess improved_guess x)
    (< (abs (- guess improved_guess))
       (* 0.000001 guess)))

  (define (sqrt x)
    (sqrt-iter 1.0 x))

  (define (square x)
    (* x x))

  (sqrt (+ 100 53))

  (sqrt 200000000000)

#+end_src

#+RESULTS:
: 447213.595499958

** Exercise 1.8

#+begin_src racket

          (define (cubrt-iter guess x)
            (let ((improved_guess (improve guess x)))
              (if (good-enough? guess improved_guess x)
                  improved_guess
                  (cubrt-iter improved_guess 
                             x))))

          (define (improve guess x)
            (/
             (+
              (/ x (square guess))
              (* 2 guess))
            3))

          (define (good-enough? guess improved_guess x)
            (< (abs (- guess improved_guess))
               (* 0.000000001 guess)))

          (define (cubrt x)
            (cubrt-iter 1.0 x))

          (define (square x)
            (* x x))

          (cubrt 27)
  
#+end_src

#+RESULTS:
: 3.0

** Exercise 1.9
#+begin_src racket :lang sicp

  # Probably recursive

  (define (+ a b)
    (if (= a 0)
        b
        (inc (+ (dec a) b))))

  (+ 4 5)
  (inc (+ (3) 5))
  (inc (inc (+ (2) 5)))
  (inc (inc (inc (+ (1) 5))))
  (inc (inc (inc (inc (5)))))
  (inc (inc (inc (6))))
  (inc (inc (7)))
  (inc (8))
  (9)

  # Probably iterative

  (define (+ a b)
    (if (= a 0)
        b
        (+ (dec a) (inc b))))

  (+ 4 5)
  (+ 3 6)
  (+ 2 7)
  (+ 1 8)
  (9)

#+end_src

*Q*: is the differentiator between an iterative and recursive process of a recursive procedure the fact that in a recursive process the self-referenced procedure is itself a parameter? In the above, the iterative process results from recursion where the procedure is replicated without any function application, whereas the recursive process results when there is function application to the self-referenced function (in other words, the self-referenced function is a parameter).

** Exercise 1.10

Ackermann's function is a classic example of a computationally challenging recursive function that is non-primitive recursive. It grows extraordinarily fast and illustrates the power of recursion in defining functions that exceed the capabilities of simpler iteration-based definitions. It is often used in theoretical computer science to explore the limits of computability and recursion.

#+begin_src racket :lang sicp

  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))

  (A 1 10)
  (A 0 (A 1 9))
  (A 0 (A 0 (A 1 8)))
  (A 0 (A 0 (A 0 (A 1 7))))
  (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (2))))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (4)))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (8))))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (16)))))))
  (A 0 (A 0 (A 0 (A 0 (A 0 (32))))))
  (A 0 (A 0 (A 0 (A 0 (64)))))
  (A 0 (A 0 (A 0 (128))))
  (A 0 (A 0 (256)))
  (A 0 (512))
  (1024)

  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 (A 0 (A 1 1))))
  (A 1 (A 1 (2 * 2)))
  (A 1 (A 1 4))
  (A 1 (A 0 (A 1 3)))
  (A 1 (A 0 (A 0 (A 1 2))))
  (A 1 (A 0 (A 0 (A 0 (A 1 1)))))
  (A 1 (A 0 (A 0 (A 0 (2)))))
  (A 1 (A 0 (A 0 (4))))
  (A 1 (A 0 (8)))
  (A 1 (16))
  (A 0 (A 1 15))
  (A 0 (A 0 (A 1 14)))
  (A 0 (A 0 (A 0...)))
  ...
  65536

  (A 3 3)
  ...
  65536

#+end_src

#+RESULTS:
: /tmp/babel-gAHOhu/org-babel-SW30vf.rkt:51:13: 0...: unbound identifier
:   in: 0...
:   location...:
:    /tmp/babel-gAHOhu/org-babel-SW30vf.rkt:51:13

#+begin_src racket

  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))

  (A 2 4)

#+end_src

#+RESULTS:
: 65536

Ackermann's function is an excellent example of a problem that highlights the difference between recursive and iterative processes, a core concept in SICP. Its explosive growth also emphasizes the importance of understanding recursion's implications in both theory and practice.

_(A 1 n)_
1 1: 2
1 2: 4
1 3: 8
is then 2^n.

_(A 2 n)_
1 1: 2
2 2: 4
2 3: 16
2 4: 65536
2 5: HUGE
Maybe? 2 ^ (n ^ 2)
1 : 2
Almost got it, basically nested powers of 2.

** Exercise 1.11
Recursive process:

#+begin_src racket

  (define (fn-three n)
    (if (< n 3)
        n
        (+ (fn-three (- n 1)) (* 2 (fn-three (- n 2))) (* 3 (fn-three (- n 3))))))

  (fn-three 4)

#+end_src

#+RESULTS:
: 11

Iterative process:

#+begin_src racket

  (define (fn-three n)
    (fn-iter 0 1 2 n))

  (define (calculate a b c)
    (+ c (* 2 b) (* 3 a)))
     
  (define (fn-iter a b c count)
    (if (= count 3)
        (calculate a b c)
        (fn-iter b c (calculate a b c) (- count 1))))

  (fn-three 5)

#+end_src

#+RESULTS:
: 25

** Exercise 1.12

Got a bit too much unplanned help from ChatGPT on this one. But key step was to see this first as just calculating a given element based on a row and column number.

#+begin_src racket

  (define (pascal r c)
    (cond ((or (= c 0) (= c r)) 1)
          (else (+
                 (pascal (- r 1) (- c 1))
                 (pascal (- r 1) c)))))

  (pascal 4 2)

#+end_src

#+RESULTS:
: 6

From ChatGPT:

The =pascal= function computes the elements of Pascal's Triangle. In Pascal's Triangle, each element is the sum of the two directly above it. The function uses recursion to compute this.

When you call =(pascal 4 2)=, it calculates the value at row 4, column 2 of Pascalâ€™s Triangle using these steps:

1. =pascal(3, 1) + pascal(3, 2)=
2. =pascal(2, 0) + pascal(2, 1) + pascal(2, 1) + pascal(2, 2)=
3. This further breaks down to =1 + (pascal(1, 0) + pascal(1, 1)) + (pascal(1, 0) + pascal(1, 1)) + 1=
4. Which simplifies to =1 + (1 + 1) + (1 + 1) + 1=
5. Leading to =1 + 2 + 2 + 1= = 6

Thus, =pascal(4, 2)= returns 6, which is the value at row 4, column 2 of Pascalâ€™s Triangle.

** Exercise 1.14
https://chatgpt.com/share/67446312-fa34-8007-bf16-78f68eedc7ee
So order of growth is ~2^n~ and steps required grows exponentially.

The trick here is to see that the algorithm calls itself twice in each call, hence the ~2^n~ in the growth as it doubles the number of computations at each step.

#+BEGIN_QUOTE
At every recursive step (except for base cases), cc calls itself twice:
Branch 1: Excludes the current coin and works with one fewer kind of coin.
Branch 2: Includes the current coin, subtracting its value from amount.
#+END_QUOTE

Depth of the recursion tree depends upon:
- the amount, as each branch uses the coin denomination to reduce the amount to zero
- the number of kinds of coins, as branches reduce the number of coin types to reach zero.

A confusing element here is that of branches terminating:
#+BEGIN_QUOTE
For example, in cc(-39, 5), the branch terminates immediately because amount < 0. These terminations reduce the total number of recursive calls in practice but do not change the order of growth, as pruning doesnâ€™t prevent the exponential branching overall.
#+END_QUOTE
So the termination is specific to actual n, but does not change the overall trend in order of growth of doubling.

** Exercise 1.15

#+begin_src racket

  (define (cube x) (* x x x))

  (define (p x) (- (* 3 x) (* 4 (cube x))))

  (define (sine angle)
    (if (not (> (abs angle) 0.1))
        angle
        (p (sine (/ angle 3.0)))))

  (sine 12.15)

#+end_src

#+RESULTS:
: -0.39980345741334

Below chat explains how the ~sine~ function is called only once in each iteration. The recursion builds as the ~sine~ function divides the input by 3 until the base case is reached. Then ~p~ is evaluated on the way back up.
https://chatgpt.com/share/6745362f-4744-8007-876d-1f1d3c1f57fb

Number of times ~p~ applied is 5 (dividing 12.15 by 3)
Order of growth is then log3(a)
